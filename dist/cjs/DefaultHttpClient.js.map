{"version":3,"file":"DefaultHttpClient.js","sourceRoot":"","sources":["../../src/DefaultHttpClient.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,+GAA+G;;;;;;;;;;;;AAE/G,mCAAsC;AACtC,2CAAqE;AACrE,yDAAwD;AAExD,oEAAoE;AACpE;IAAuC,qCAAU;IAG7C,mJAAmJ;IACnJ;QAAA,YACI,iBAAO,SAGV;QADG,KAAI,CAAC,UAAU,GAAG,IAAI,qCAAiB,EAAE,CAAC;;IAC9C,CAAC;IAED,kBAAkB;IACX,gCAAI,GAAX,UAAY,OAAoB;QAC5B,wDAAwD;QACxD,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE;YACpD,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,mBAAU,EAAE,CAAC,CAAC;SAC3C;QAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACjB,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;SAC1D;QACD,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE;YACd,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;SACvD;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IACL,wBAAC;AAAD,CAAC,AA1BD,CAAuC,uBAAU,GA0BhD;AA1BY,8CAAiB","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { AbortError } from \"./Errors\";\nimport { HttpClient, HttpRequest, HttpResponse } from \"./HttpClient\";\nimport { MiniAppHttpClient } from \"./MiniAppHttpClient\";\n\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\nexport class DefaultHttpClient extends HttpClient {\n    private readonly httpClient: HttpClient;\n\n    /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\n    public constructor() {\n        super();\n\n        this.httpClient = new MiniAppHttpClient();\n    }\n\n    /** @inheritDoc */\n    public send(request: HttpRequest): Promise<HttpResponse> {\n        // Check that abort was not signaled before calling send\n        if (request.abortSignal && request.abortSignal.aborted) {\n            return Promise.reject(new AbortError());\n        }\n\n        if (!request.method) {\n            return Promise.reject(new Error(\"No method defined.\"));\n        }\n        if (!request.url) {\n            return Promise.reject(new Error(\"No url defined.\"));\n        }\n\n        return this.httpClient.send(request);\n    }\n}\n"]}