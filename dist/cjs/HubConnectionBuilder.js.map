{"version":3,"file":"HubConnectionBuilder.js","sourceRoot":"","sources":["../../src/HubConnectionBuilder.ts"],"names":[],"mappings":";AAAA,sDAAsD;AACtD,+GAA+G;;AAE/G,mDAAkD;AAClD,iDAAgD;AAKhD,qDAAoD;AACpD,qCAAuC;AACvC,iCAA6C;AAE7C,iFAAiF;AACjF;IAAA;IAwHA,CAAC;IA3FU,+CAAgB,GAAvB,UAAwB,OAA2B;QAC/C,WAAG,CAAC,UAAU,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAEnC,IAAI,QAAQ,CAAC,OAAO,CAAC,EAAE;YACnB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC;SACzB;aAAM;YACH,IAAI,CAAC,MAAM,GAAG,IAAI,qBAAa,CAAC,OAAO,CAAC,CAAC;SAC5C;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IA0BM,sCAAO,GAAd,UAAe,GAAW,EAAE,sBAAmE;QAC3F,WAAG,CAAC,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAE3B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QAEf,gHAAgH;QAChH,wHAAwH;QACxH,IAAI,OAAO,sBAAsB,KAAK,QAAQ,EAAE;YAC5C,IAAI,CAAC,qBAAqB,GAAG,sBAAsB,CAAC;SACvD;aAAM;YACH,IAAI,CAAC,qBAAqB,GAAG;gBACzB,SAAS,EAAE,sBAAsB;aACpC,CAAC;SACL;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,8CAAe,GAAtB,UAAuB,QAAsB;QACzC,WAAG,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAErC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;;OAGG;IACI,oCAAK,GAAZ;QACI,qFAAqF;QACrF,8BAA8B;QAC9B,IAAM,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,IAAI,EAAE,CAAC;QAE/D,8EAA8E;QAC9E,IAAI,qBAAqB,CAAC,MAAM,KAAK,SAAS,EAAE;YAC5C,gGAAgG;YAChG,qBAAqB,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;SAC9C;QAED,4BAA4B;QAC5B,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,0FAA0F,CAAC,CAAC;SAC/G;QACD,IAAM,UAAU,GAAG,IAAI,+BAAc,CAAC,IAAI,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC;QAEvE,OAAO,6BAAa,CAAC,MAAM,CACvB,UAAU,EACV,IAAI,CAAC,MAAM,IAAI,oBAAU,CAAC,QAAQ,EAClC,IAAI,CAAC,QAAQ,IAAI,IAAI,iCAAe,EAAE,CAAC,CAAC;IAChD,CAAC;IACL,2BAAC;AAAD,CAAC,AAxHD,IAwHC;AAxHY,oDAAoB;AA0HjC,kBAAkB,MAAW;IACzB,OAAO,MAAM,CAAC,GAAG,KAAK,SAAS,CAAC;AACpC,CAAC","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { IHttpConnectionOptions } from \"./IHttpConnectionOptions\";\nimport { IHubProtocol } from \"./IHubProtocol\";\nimport { ILogger, LogLevel } from \"./ILogger\";\nimport { HttpTransportType } from \"./ITransport\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\n\n/** A builder for configuring {@link @aspnet/signalr.HubConnection} instances. */\nexport class HubConnectionBuilder {\n    /** @internal */\n    public protocol?: IHubProtocol;\n    /** @internal */\n    public httpConnectionOptions?: IHttpConnectionOptions;\n    /** @internal */\n    public url?: string;\n    /** @internal */\n    public logger?: ILogger;\n\n    /** Configures console logging for the {@link @aspnet/signalr.HubConnection}.\n     *\n     * @param {LogLevel} logLevel The minimum level of messages to log. Anything at this level, or a more severe level, will be logged.\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public configureLogging(logLevel: LogLevel): HubConnectionBuilder;\n\n    /** Configures custom logging for the {@link @aspnet/signalr.HubConnection}.\n     *\n     * @param {ILogger} logger An object implementing the {@link @aspnet/signalr.ILogger} interface, which will be used to write all log messages.\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public configureLogging(logger: ILogger): HubConnectionBuilder;\n    /** Configures custom logging for the {@link @aspnet/signalr.HubConnection}.\n     *\n     * @param {LogLevel | ILogger} logging An object implementing the {@link @aspnet/signalr.ILogger} interface or {@link @aspnet/signalr.LogLevel}.\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder;\n    public configureLogging(logging: LogLevel | ILogger): HubConnectionBuilder {\n        Arg.isRequired(logging, \"logging\");\n\n        if (isLogger(logging)) {\n            this.logger = logging;\n        } else {\n            this.logger = new ConsoleLogger(logging);\n        }\n\n        return this;\n    }\n\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\n     *\n     * The transport will be selected automatically based on what the server and client support.\n     *\n     * @param {string} url The URL the connection will use.\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public withUrl(url: string): HubConnectionBuilder;\n\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified HTTP-based transport to connect to the specified URL.\n     *\n     * @param {string} url The URL the connection will use.\n     * @param {HttpTransportType} transportType The specific transport to use.\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public withUrl(url: string, transportType: HttpTransportType): HubConnectionBuilder;\n\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use HTTP-based transports to connect to the specified URL.\n     *\n     * @param {string} url The URL the connection will use.\n     * @param {IHttpConnectionOptions} options An options object used to configure the connection.\n     * @returns The {@link @aspnet/signalr.HubConnectionBuilder} instance, for chaining.\n     */\n    public withUrl(url: string, options: IHttpConnectionOptions): HubConnectionBuilder;\n    public withUrl(url: string, transportTypeOrOptions?: IHttpConnectionOptions | HttpTransportType): HubConnectionBuilder {\n        Arg.isRequired(url, \"url\");\n\n        this.url = url;\n\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n        if (typeof transportTypeOrOptions === \"object\") {\n            this.httpConnectionOptions = transportTypeOrOptions;\n        } else {\n            this.httpConnectionOptions = {\n                transport: transportTypeOrOptions,\n            };\n        }\n\n        return this;\n    }\n\n    /** Configures the {@link @aspnet/signalr.HubConnection} to use the specified Hub Protocol.\n     *\n     * @param {IHubProtocol} protocol The {@link @aspnet/signalr.IHubProtocol} implementation to use.\n     */\n    public withHubProtocol(protocol: IHubProtocol): HubConnectionBuilder {\n        Arg.isRequired(protocol, \"protocol\");\n\n        this.protocol = protocol;\n        return this;\n    }\n\n    /** Creates a {@link @aspnet/signalr.HubConnection} from the configuration options specified in this builder.\n     *\n     * @returns {HubConnection} The configured {@link @aspnet/signalr.HubConnection}.\n     */\n    public build(): HubConnection {\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n        // provided to configureLogger\n        const httpConnectionOptions = this.httpConnectionOptions || {};\n\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n        if (httpConnectionOptions.logger === undefined) {\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n            httpConnectionOptions.logger = this.logger;\n        }\n\n        // Now create the connection\n        if (!this.url) {\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n        }\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\n\n        return HubConnection.create(\n            connection,\n            this.logger || NullLogger.instance,\n            this.protocol || new JsonHubProtocol());\n    }\n}\n\nfunction isLogger(logger: any): logger is ILogger {\n    return logger.log !== undefined;\n}\n"]}