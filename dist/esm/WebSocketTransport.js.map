{"version":3,"file":"WebSocketTransport.js","sourceRoot":"","sources":["../../src/WebSocketTransport.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\n\nimport { ILogger, LogLevel } from \"./ILogger\";\nimport { ITransport, TransferFormat } from \"./ITransport\";\nimport { Arg, getDataDetail } from \"./Utils\";\n\n/** @private */\nexport class WebSocketTransport implements ITransport {\n    private readonly logger: ILogger;\n    private readonly accessTokenFactory: (() => string | Promise<string>) | undefined;\n    private readonly logMessageContent: boolean;\n    private webSocket?: WXSocketTaskAPI;\n    private state: boolean;\n\n    public onreceive: ((data: string | ArrayBuffer) => void) | null;\n    public onclose: ((error?: Error) => void) | null;\n\n    constructor(accessTokenFactory: (() => string | Promise<string>) | undefined, logger: ILogger, logMessageContent: boolean) {\n        this.logger = logger;\n        this.accessTokenFactory = accessTokenFactory;\n        this.logMessageContent = logMessageContent;\n        this.state = false;\n\n        this.onreceive = null;\n        this.onclose = null;\n    }\n\n    public async connect(url: string, transferFormat: TransferFormat): Promise<void> {\n        Arg.isRequired(url, \"url\");\n        Arg.isRequired(transferFormat, \"transferFormat\");\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\n\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting\");\n\n        if (this.accessTokenFactory) {\n            const token = await this.accessTokenFactory();\n            if (token) {\n                url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\n            }\n        }\n\n        return new Promise<void>((resolve, reject) => {\n            url = url.replace(/^http/, \"ws\");\n            const webSocket = wx.connectSocket({ url });\n            // wx not suppert binaryType\n            // if (transferFormat === TransferFormat.Binary) {\n            //     webSocket.binaryType = \"arraybuffer\";\n            // }\n\n            // tslint:disable-next-line:variable-name\n            webSocket.onOpen(() => {\n                // webSocket.onOpen = () => {\n                this.logger.log(LogLevel.Information, `WebSocket connected to ${url}`);\n                this.webSocket = webSocket;\n                this.state = true;\n                resolve();\n            });\n\n            webSocket.onError((error: any) => {\n                // webSocket.onError = (error: any) => {\n                reject(error);\n            });\n\n            webSocket.onMessage((data: any) => {\n                this.logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(data, this.logMessageContent)}.`);\n                if (this.onreceive) {\n                    this.onreceive(data.data);\n                }\n            });\n\n            webSocket.onClose(() => this.close());\n        });\n    }\n\n    public send(data: any): Promise<void> {\n        if (this.webSocket && this.state) {\n            this.logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this.logMessageContent)}.`);\n            const ws = this.webSocket;\n            return new Promise((resolve, reject) => {\n                ws.send({\n                    data,\n                    fail: reject,\n                    success: resolve,\n                });\n            });\n        }\n\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\n    }\n\n    public stop(): Promise<void> {\n        if (this.webSocket) {\n            // Clear websocket handlers because we are considering the socket closed now\n            this.webSocket.onClose = () => { };\n            this.webSocket.onMessage = () => { };\n            this.webSocket.onError = () => { };\n            this.webSocket.close({});\n            this.webSocket = undefined;\n\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\n            this.close(undefined);\n        }\n\n        return Promise.resolve();\n    }\n\n    private close(event?: CloseEvent): void {\n        // webSocket will be null if the transport did not start successfully\n        this.state = false;\n        this.logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\n        if (this.onclose) {\n            if (event && (event.wasClean === false || event.code !== 1000)) {\n                this.onclose(new Error(`Websocket closed with status code: ${event.code} (${event.reason})`));\n            } else {\n                this.onclose();\n            }\n        }\n    }\n}\n"]}